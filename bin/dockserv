#!/usr/bin/env node
const fs      = require('fs');
const path    = require('path');
const program = require('commander');

const _package = require('../package.json');
const config   = require('../lib/config');
const dockserv = require('../lib/dockserv');
const services = require('../lib/service');

/*
  Command Line Interface.
 */

var invoked = false;

program
  .version(_package.version);

program
  .command('config')
  .description('Returns the current configuration')
  .action(invoke(function () {
    config.getConfig(function (err, config) {
      if (err) {
        exit(1, err);
      }
      exit(0, JSON.stringify(config, null, 2));
    });
  }));

program
  .command('reset')
  .description('Resets configuration to the default')
  .action(invoke(function () {
    config.reset(function () {
      exit(0, 'Configuration reset.');
    });
  }));

program
  .command('set [key] [value]')
  .description('Sets a key/value pair inside the configuration')
  .action(invoke(function (key, value) {
    if (!key || !value) {
      exit(1, 'Key and value are required!');
    }

    config.set(key, value, function (err) {
      if (err) {
        exit(1, err);
      }
      exit(0, 'Key `' + key + '` set to `' + value + '`.');
    });
  }));

program
  .command('add [service] [definition]')
  .description('Adds a new docker service')
  .action(invoke(function (service, definition) {
    if (!service || !definition) {
      exit(1, 'Service name and definition are required!');
    }

    var serv = services.get(service);

    if (serv) {
      exit(1, 'Service already exists!');
    }

    var options = {};

    if (/^https?:\/\//.test(definition)) {
      options.url = definition;
    } else {
      options.definition = path.resolve(definition);
    }

    dockserv.add(service, options, function (err) {
      if (err) {
        exit(1, err);
      }
      exit(0, 'Added definition for `' + service + '`.');
    });
  }));

program
  .command('start [service]')
  .description('Starts a docker service')
  .option('-v, --version [version]', 'Specify a version of the image to work with', 'latest')
  .action(action('start'));

program
  .command('stop [service]')
  .description('Stops a docker service')
  .action(action('stop'));

program
  .command('restart [service]')
  .description('Restarts a docker service')
  .action(action('restart'));

program
  .parse(process.argv);

if (!invoked) {
  program
    .help();
}

/*
  Internals.
 */

function action(action) {
  return invoke(doAction.bind(doAction, action));
}

function doAction(action, service, options) {
  ensureService(service, function (service) {
    dockserv[action](service, options || {}, handleResult);
  });
}

function ensureService(service, cb) {
  if (!service) {
    exit(1, 'Invalid service name provided!');
  }

  var serv = services.get(service);

  if (!serv) {
    exit(1, 'Invalid service name provided!');
  }

  serv.name = service;

  cb(serv);
}

function exit(code, msg) {
  console[code === 0 ? 'info' : 'error'](msg);
  process.exit(code);
}

function handleResult(err) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
  process.exit();
}

function invoke(fn) {
  return function () {
    invoked = true;
    fn.apply(fn, Array.from(arguments));
  };
}
